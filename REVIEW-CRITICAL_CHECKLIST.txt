Folded - Review-Critical Delivery Plan (Stage A + B)

Purpose
A no-nonsense, implementation-ordered checklist to reach App Store review readiness. Each deliverable has acceptance criteria, detailed how-to steps, and verification notes that align with Apple’s review expectations.

Ground rules
- Only request permissions when a visible Settings control exists and has a clear purpose string.
- All external links open in in-app browser; no 404s; required disclaimers present.
- Remove unused frameworks and permissions (avoid surprise prompts).
- Version/build numbers must match and be visible in-app.
- Privacy map must match the binary’s actual data flows.
- Export/Networking over HTTPS only.

Implementation order

1) Settings foundation (shell + navigation)
Deliverable
- A single Settings entry point with subpages: Account, Notifications, Legal, Support & Feedback, Data & Privacy, About.

Acceptance
- Every row navigates to a subpage; back buttons work on small devices; dark mode looks clean.

How
- Create a dedicated route stack: src/app/settings/index.tsx (root list) and subpages:
  - src/app/settings/account.tsx
  - src/app/settings/notifications.tsx
  - src/app/settings/legal.tsx
  - src/app/settings/support.tsx
  - src/app/settings/privacy.tsx
  - src/app/settings/about.tsx
- Update UI entry point:
  - Replace current Settings modal usage with a gear button that pushes to settings/ route (keep modal around if needed short-term, but shell must be real pages).
- Use simple list rows (tap areas), chevrons, and proper back behavior with expo-router Stack. Test iPhone SE width.

Verify
- Navigate each row and back. Toggle system dark mode and confirm readable contrast.


2) Legal (link-only first)
Deliverable
- Rows: Privacy Policy, Terms of Use, Crisis & Resources (with disclaimer).

Acceptance
- Links open via in-app browser; no 404s; "Not medical advice" line appears on Crisis page.

How
- In settings/legal.tsx:
  - Use expo-web-browser for Privacy and Terms links.
  - For "Crisis & Resources", push to settings/legal/crisis.tsx:
    - Top text: "If you’re in danger, call local emergency services."
    - Prominent one-line disclaimer: "Folded is not medical or clinical advice."
    - Regional helplines links (web) — open via in-app browser.
- Add error handling: failed opens show a toast and suggest opening in Safari.

Verify
- All links load. Crisis page shows the disclaimer text every time.


3) Support & Feedback
Deliverable
- Rows: Contact Support, Send Feedback (reuses existing FeedbackModal).

Acceptance
- "Contact Support" opens prefilled email with subject including app version/build, device model, iOS; "Send Feedback" opens the app’s feedback mechanism.

How
- In settings/support.tsx:
  - Use expo-mail-composer:
    - Subject: "Folded Support – v{Constants.expoConfig.version} ({build}) – {Device.modelName} iOS {SystemVersion}".
    - Body template with space for user text.
    - To: support@yourdomain
  - Fallback: if MailComposer.isAvailableAsync returns false, use mailto with Linking.
  - "Send Feedback": open existing FeedbackModal from anywhere (e.g., context/screen-level state).
- Ensure feedback submissions use existing Firestore flow.

Verify
- Email launches prefilled; FeedbackModal posts a record in Firestore.


4) Notifications (Reminders toggle, Quiet Hours, Test)
Deliverable
- Rows: Reminders (toggle), Quiet Hours (time range), Test Notification.

Acceptance
- First enable asks for permission with a clear purpose; toggle off cancels schedules; "Test" fires within 5s if allowed; denied state shows "Enable in iOS Settings" CTA.

How
- Use expo-notifications for local reminders; keep FCM for push but don’t mix responsibilities.
- Data model (merge into user doc or local storage if you prefer client-only):
  - notifications.remindersEnabled: boolean
  - notifications.reminderTime: string ("21:00") or schedule policy
  - notifications.quietHours: { start: "22:00", end: "08:00" }
  - notifications.lastScheduledAt?: number (for debugging)
- Permission flow:
  - If enabling reminders and permission is undetermined → show rationale sheet → request via Notifications.requestPermissionsAsync().
  - If denied → show disabled UI and "Enable in iOS Settings" button → open settings.
- Scheduling:
  - When remindersEnabled=true and permission granted, schedule daily local notification at reminderTime except within quietHours. If current time within quiet hours, schedule next outside window.
  - On toggle off, cancel all scheduled notifications.
  - Test button: schedule a one-off notification for +5 seconds with a recognizable title/body.
- Quiet Hours:
  - Store start/end. When saving, re-evaluate schedules. Consider user’s local timezone (default device TZ).
- Foreground handling:
  - Optionally set a handler to show alerts when foregrounded.

Verify
- Fresh enable → permission sheet → enabling sets a schedule.
- Toggle off cancels (no notifications fire).
- Denied state shows "Enable in iOS Settings".
- Test fires in 5 seconds if permission granted.


5) Account (Display Name, Sign Out, Delete Account)
Deliverable
- Rows: Display Name (editable), Sign Out, Delete Account (destructive).

Acceptance
- Sign out clears secure storage/state and returns to Welcome; Delete flow shows confirm sheet → success toast → returns to Welcome.

How
- Display Name:
  - Tap opens existing ProfileEditModal or a minimal inline editor; persist via updateUser('displayName', value).
- Sign Out:
  - Call existing signOut(); ensure navigation redirects to Welcome and wipes transient state.
- Delete Account (end-to-end):
  - UI:
    - Destructive row → confirmation sheet warning "Permanent, unrecoverable".
    - If the backend requires recent login, prompt re-auth (email/password or Apple Sign-in refresh).
    - Show activity state while deleting.
  - Client sequence:
    1) Optional re-auth if needed.
    2) Call callable function user-purgeUser (see backend below).
    3) On success: clear local caches (any persisted stores/AsyncStorage/Keychain if used).
    4) Show success toast.
    5) Navigate to Welcome.
  - Backend (Firebase Functions – callable):
    - purgeUser(uid inferred from auth):
      - Delete Firestore: user doc and ALL subcollections (iterate with listCollections and batch delete).
      - Delete Storage: list profile-images/{uid}/** and delete all.
      - Delete analytics identifiers: remove any events with userId==uid (top-level events collection); use a query and batched deletes.
      - Clear messaging token or delete the doc entirely.
      - Delete Auth user via Admin SDK.
      - Cancel any server schedules if you later add them.
    - Return { ok: true }.
  - Security:
    - Callable requires authenticated user.
    - Ensure function runs as admin (service account).

Verify
- After deletion, relaunch app → Welcome screen.
- Firestore user doc gone; related collections gone; Storage profile images gone.
- Support cannot recover data.


6) About
Deliverable
- Rows: Version & Build; Open-source licenses.

Acceptance
- Version matches Info.plist (iOS) and your expo version; licenses page renders without jank.

How
- Version/Build:
  - Fix mismatch now:
    - app.json: version "1.0.1" and ios.buildNumber "2".
    - ios/Info.plist shows CFBundleShortVersionString "1.0.0" and CFBundleVersion "1".
  - Choose source of truth:
    - If building with EAS, make app.json version/build authoritative and sync Info.plist via expo prebuild or update Info.plist to match.
  - In "About" screen, show:
    - App version: Constants.expoConfig?.version
    - Build: iOS CFBundleVersion if accessible, else mirror from app.json.
- Licenses:
  - Option A (fast): Add static screen with "Open-source licenses" link list to the most important libs.
  - Option B (better): Generate an OSS attributions JSON at build-time, bundle, and render in a simple list.

Verify
- Values match what TestFlight shows. Licenses screen scrolls fluidly.


7) Data & Privacy (App Privacy data map)
Deliverable
- One-page list of: what you collect, why, linked/unlinked, retention.

Acceptance
- The map directly matches the App Store "Privacy Nutrition" and actual binary behavior.

How
- Build settings/privacy.tsx with headings and bullets:
  - Collected:
    - Auth UID (linked): account functionality, retention until delete.
    - Email (optional, linked): account communication, retention until delete.
    - Usage/Diagnostics (events to Firestore): app improvement, linked to UID (if signed in), retention until delete.
    - Messaging token: to deliver push notifications, linked to UID, retention until token is invalid or user deletes account.
  - Not collected:
    - Contacts, location, health, financial info (unless you later enable banking).
  - Sharing: No third-party tracking SDKs; events stored in your Firebase project.
  - Deletion: via Settings → Account → Delete Account.
- Confirm it matches code:
  - Analytics: events are logged to Firestore with userId.
  - Messaging token stored in user doc.

Verify
- Text accurately reflects the app. Cross-check with App Store Connect privacy form.


8) Permissions & purpose strings; remove unused frameworks
Deliverable
- Only request permissions with a Settings control and visible reason. Remove unused frameworks/permissions.

Acceptance
- No permission is requested without a Settings control and a visible reason.

How
- Keep:
  - Camera & Photos: present and used for profile and daily challenge. Strings already present.
- Remove or tune:
  - Microphone: if you don’t record audio anywhere, remove microphone permission text and disable any plugin microphone option.
- Notifications:
  - Purpose is the Reminders toggle; ensure rationale and permission flow are implemented before requesting.
- Audit Android permissions too: keep only what you use.

Verify
- No unexpected prompts on app start. Toggling features triggers clear, justified permission prompts.


9) Networking & Export
Deliverable
- Export: standard HTTPS only. Avoid unneeded ATS exceptions.

Acceptance
- No regulated claims in copy; rating matches content.

How
- Info.plist:
  - NSAllowsArbitraryLoads=false (already set).
  - NSAllowsLocalNetworking=true is present; set to false unless you truly need local network access.
- Copy:
  - Remove any medical/clinical claims; keep Crisis disclaimer strong.

Verify
- All APIs load over HTTPS. App functions with ATS on. Copy review by a non-technical reviewer.


10) Reviewer notes & test access (App Store Connect)
Deliverable
- Exact sign-in path (or steps to self-create); list any feature flags. Call out timers computed from stored timestamps; no background execution.

Acceptance
- A fresh tester can follow your steps and see the core loop in under 2 minutes.

How
- Provide:
  - Steps to sign up/sign in (email/password or Apple, whichever you use for review).
  - Steps to reach daily challenge and notifications test.
  - Note: reminders are local notifications scheduled from device time; timers based on stored timestamps; no background fetch or execution.
  - Mention Settings → Legal (links) and Crisis disclaimer.
  - Include a demo account if needed (and how to reset state).

Verify
- Dry run on a clean device; timer math and navigation work as described.


QA runbook (quick hits)
- Settings: navigate all rows; back works on iPhone SE size; dark mode OK.
- Legal: all links load; Crisis shows "not medical advice".
- Support: Mail opens with prefilled subject/body; fallback works.
- Feedback: Submission creates a Firestore record.
- Notifications: enable → permission prompt → scheduled; toggle off → canceled; quiet hours honored; Test fires in 5s.
- Account: edit display name persists; sign out returns to Welcome; delete purges and relaunch shows Welcome; data gone in Firestore/Storage.
- About: version/build match TestFlight; licenses screen loads smoothly.
- Privacy map: content matches code and App Store answers.
- Permissions: no unexpected prompts; microphone not requested if unused.
- Networking: HTTPS only; ATS satisfied.


Notes on current gaps to fix early
- Version mismatch: app.json vs Info.plist. Align now.
- Settings UI: replace placeholder modal with actual pages and routing.
- Backend purge: implement callable purgeUser and client flow.
- Notifications UI/logic: add reminders/quiet hours/test + permission gate.
- Remove unused microphone permission and any unused plugin microphone option if not recording audio.


Suggested development sequence (day-by-day style)
1) Day 1: Settings shell + nav; Legal links (with Crisis disclaimer).
2) Day 2: Support & Feedback (Mail composer + hook existing FeedbackModal).
3) Day 3: Notifications page (UI + permission flow + Test button).
4) Day 4: Notifications scheduling (daily reminder + quiet hours + toggle cancel).
5) Day 5: Account page (Display Name hook + Sign Out path to Welcome).
6) Day 6: Backend purgeUser callable + client delete flow with re-auth and toasts.
7) Day 7: About page (version/build), fix version mismatch, basic licenses screen.
8) Day 8: Data & Privacy map screen + permissions cleanup (remove microphone/unused frameworks).
9) Day 9: Reviewer notes & dry-run QA on clean device; tighten copy and ATS.
